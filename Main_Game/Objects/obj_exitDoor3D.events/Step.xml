<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">x = (obj_blockGraph.blockGraph[currentSpace,Block3D_v1x]+obj_blockGraph.blockGraph[currentSpace,Block3D_v2x]+obj_blockGraph.blockGraph[currentSpace,Block3D_v3x]+obj_blockGraph.blockGraph[currentSpace,Block3D_v4x])/4;
y = (obj_blockGraph.blockGraph[currentSpace,Block3D_v1y]+obj_blockGraph.blockGraph[currentSpace,Block3D_v2y]+obj_blockGraph.blockGraph[currentSpace,Block3D_v3y]+obj_blockGraph.blockGraph[currentSpace,Block3D_v4y])/4;
z = (obj_blockGraph.blockGraph[currentSpace,Block3D_v1z]+obj_blockGraph.blockGraph[currentSpace,Block3D_v2z]+obj_blockGraph.blockGraph[currentSpace,Block3D_v3z]+obj_blockGraph.blockGraph[currentSpace,Block3D_v4z])/4;

dir1x = obj_blockGraph.blockGraph[currentSpace,Block3D_v3x] - obj_blockGraph.blockGraph[currentSpace,Block3D_v1x];
dir1y = obj_blockGraph.blockGraph[currentSpace,Block3D_v3y] - obj_blockGraph.blockGraph[currentSpace,Block3D_v1y];
dir1z = obj_blockGraph.blockGraph[currentSpace,Block3D_v3z] - obj_blockGraph.blockGraph[currentSpace,Block3D_v1z];

dir2x = obj_blockGraph.blockGraph[currentSpace,Block3D_v4x] - obj_blockGraph.blockGraph[currentSpace,Block3D_v1x];
dir2y = obj_blockGraph.blockGraph[currentSpace,Block3D_v4y] - obj_blockGraph.blockGraph[currentSpace,Block3D_v1y];
dir2z = obj_blockGraph.blockGraph[currentSpace,Block3D_v4z] - obj_blockGraph.blockGraph[currentSpace,Block3D_v1z];

nx = dir1y*dir2z - dir1z*dir2y;
ny = dir1z*dir2x - dir1x*dir2z;
nz = dir1x*dir2y - dir1y*dir2x;

norm = sqrt(nx*nx + ny*ny + nz*nz);
nx /= norm;
ny /= norm;
nz /= norm;

sideX = (obj_blockGraph.blockGraph[currentSpace,Block3D_v1x + 3*((sideFacing mod 3) + sign(sideFacing))] + obj_blockGraph.blockGraph[currentSpace,Block3D_v1x + 3*((((sideFacing+1) mod 4) mod 3) + sign((sideFacing+1) mod 4))])/2;
sideY = (obj_blockGraph.blockGraph[currentSpace,Block3D_v1y + 3*((sideFacing mod 3) + sign(sideFacing))] + obj_blockGraph.blockGraph[currentSpace,Block3D_v1y + 3*((((sideFacing+1) mod 4) mod 3) + sign((sideFacing+1) mod 4))])/2;
sideZ = (obj_blockGraph.blockGraph[currentSpace,Block3D_v1z + 3*((sideFacing mod 3) + sign(sideFacing))] + obj_blockGraph.blockGraph[currentSpace,Block3D_v1z + 3*((((sideFacing+1) mod 4) mod 3) + sign((sideFacing+1) mod 4))])/2;

dirX = sideX-x;
dirY = sideY-y;
dirZ = sideZ-z;

norm = sqrt(dirX*dirX + dirY*dirY + dirZ*dirZ);
dirX /= norm;
dirY /= norm;
dirZ /= norm;

axisX_x = (dirY*nz - dirZ*ny);
axisX_y = (dirZ*nx - dirX*nz);
axisX_z = (dirX*ny - dirY*nx);

if (obj_player3D.currentSpace == currentSpace &amp;&amp; obj_player3D.movingSideOne == sideFacing)
{
    if (obj_player3D.moving == 1 &amp;&amp; obj_player3D.motion == 3)
    {
        if (north == 1)
        {
            global.levelCompletionsNorth[level] = 1;
        }
        
        if (west == 1)
        {
            global.levelCompletionsWest[level] = 1;
        }
        
        if (east == 1)
        {
            global.levelCompletionsEast[level] = 1;
        }
        
        if (south == 1)
        {
            global.levelCompletionsSouth[level] = 1;
        }
        
        d3d_end();
        room_goto(rm_overworldLoadTest);
    }
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
